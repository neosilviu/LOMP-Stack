# WordPress LOMP Stack - Clean & Minimal Approach

> **Philosophy: Only What You Need** 🎯  
> **Multi-Language Support: 🇷🇴 🇬🇧 🇪🇸 🇫🇷 🇩🇪**

This WordPress LOMP stack prioritizes **system cleanliness** and **minimal installations**. No bloat, no unnecessary packages - only what you actually need.

**First Step: Language Selection** - All installation scripts start with language selection for better user experience.

## 🚀 **Quick Start**

### 🎛️ **Interactive Installation (Recommended)**
```bash
# Complete guided installation with language and mode selection
sudo bash minimal_install.sh
```

### 🎯 **Command Line Installation**
```bash
# Ultra-minimal (Nginx + WordPress)
sudo bash minimal_install.sh --ultra

# Advanced mode (custom configuration)
sudo bash minimal_install.sh --advanced

# Debug mode (detailed logging)
sudo bash minimal_install.sh --debug

# Verbose mode (ultra-detailed output)  
sudo bash minimal_install.sh --verbose

# Standard minimal (OpenLiteSpeed) - default when no parameters
sudo bash minimal_install.sh
```

### 🚀 **Zero-Interaction Auto Install**
```bash
# Completely automated with Cloudflare Tunnel
sudo bash auto_install.sh --tunnel-id YOUR_TUNNEL_ID --auto

# Auto install with custom domain and email
sudo bash auto_install.sh --tunnel-id abc123 --domain example.com --email admin@example.com --auto

# Interactive mode (asks for tunnel ID only)
sudo bash auto_install.sh
```

**Auto Install Features:**
- 🔄 **Zero Interaction:** Complete automation with `--auto` flag
- 🌐 **Cloudflare Integration:** Automatic tunnel setup
- 🔐 **Auto-Generated Credentials:** Secure passwords and configurations
- 📝 **Full Logging:** Complete installation logs

### 📦 **Component Manager**
```bash
# Add components after installation
sudo bash component_manager.sh
```
**Add when needed:** Redis, AI Dashboard, Cloudflare, Monitoring, etc.

## 🌍 **Supported Languages**

- 🇷🇴 **Română** (Romanian) - Default
- 🇬🇧 **English** 
- 🇪🇸 **Español** (Spanish)
- 🇫🇷 **Français** (French) 
- 🇩🇪 **Deutsch** (German)

## 🚀 **Installation Modes**

### Installation Mode Options:

#### ⭐ **1. Standard Minimal** (Default)
- **Web Server:** OpenLiteSpeed with admin panel
- **Database:** MariaDB 
- **Features:** PHP 8.1, WP-CLI, Basic Security
- **Best for:** Production sites, performance optimization
- **Resources:** ~500MB | **Memory:** ~300MB

#### ⚡ **2. Ultra-Minimal** 
- **Web Server:** Nginx-light (minimal resources)
- **Database:** MariaDB
- **Features:** PHP 8.1, WordPress core only
- **Best for:** Testing, development, resource-constrained systems
- **Resources:** ~300MB | **Memory:** ~200MB

#### ⚙️ **3. Advanced Configuration**
- **Web Server:** Choose from OpenLiteSpeed/Nginx/Apache
- **Database:** Choose from MariaDB/MySQL/External
- **Security:** Optional firewall, fail2ban, advanced security
- **Performance:** Optional caching, compression, optimization

#### 🔍 **4. Debug Mode**
- **Base:** Standard Minimal + Detailed logging
- **Features:** Complete installation logs, step-by-step tracking
- **Log Location:** `/var/log/wordpress-installer/`
- **Best for:** Troubleshooting, understanding installation process

#### 📝 **5. Verbose Mode**
- **Base:** Standard Minimal + Ultra-detailed output
- **Features:** Real-time command output, configuration tracking
- **Debugging:** Full bash debugging with `set -x`
- **Best for:** Development, deep system monitoring

### 📊 **Installation Modes Comparison**

| Feature | Ultra-Minimal | Standard | Advanced | Debug | Verbose |
|---------|---------------|----------|----------|-------|---------|
| **Web Server** | Nginx-light | OpenLiteSpeed | Choice | OpenLiteSpeed | OpenLiteSpeed |
| **Admin Panel** | ❌ | ✅ | ✅ | ✅ | ✅ |
| **WP-CLI** | ❌ | ✅ | ✅ | ✅ | ✅ |
| **Security** | Basic | Basic | Custom | Basic | Basic |
| **Logging** | Basic | Basic | Basic | **Detailed** | **Real-time** |
| **Resources** | ~300MB | ~500MB | Variable | ~500MB | ~500MB |
| **Best for** | Testing | Production | Custom | Troubleshoot | Development |
- **Best for:** Custom setups, specific requirements

### � **Direct Installation (Command Line)**

```bash
# Ultra-minimal mode (Nginx)
sudo bash minimal_install.sh --ultra

# Advanced mode (custom configuration)
sudo bash minimal_install.sh --advanced

# Standard minimal (OpenLiteSpeed) - default when no parameters
sudo bash minimal_install.sh
```

### 📦 **Component Manager**
```bash
# Add components after installation
sudo bash component_manager.sh
```
**Add when needed:** Redis, AI Dashboard, Cloudflare, Monitoring, etc.

---

## 📋 **What Gets Installed When**

### Ultra-Minimal Mode (`--ultra`)
- ✅ **MariaDB** (database only)
- ✅ **PHP-FPM** (essential extensions only)
- ✅ **Nginx** (lightweight web server)
- ✅ **WordPress** (core files)
- ❌ No additional tools, no extras

### Standard Minimal Mode (default)
- ✅ Everything from Ultra-Minimal +
- ✅ **OpenLiteSpeed** (replaces Nginx for better performance)
- ✅ **WP-CLI** (WordPress management)
- ✅ **UFW Firewall** (basic security)
- ❌ No Redis, no monitoring, no extras

### Optional Components (Install Later)
- 📊 **Redis Cache** → `bash helpers/install_redis.sh`
- 🤖 **AI Dashboard** → `bash helpers/ai_server_agent.sh`
- ☁️ **Cloudflare Tunnel** → `bash helpers/install_cloudflare.sh`
- 📈 **Monitoring Tools** → `bash helpers/install_monitoring.sh`
- 🛡️ **Advanced Security** → `bash helpers/install_security.sh`

---

## 🎯 **Clean System Benefits**

| Approach | Disk Usage | Memory | Boot Time | Maintenance |
|----------|------------|--------|-----------|-------------|
| Ultra-Minimal | ~300MB | ~200MB | ~30s | Minimal |
| Standard Minimal | ~500MB | ~300MB | ~45s | Low |
| Full Installation | ~2GB+ | ~800MB+ | ~90s+ | High |

---

## 🔍 **Check What's Installed**

```bash
# Check core components only
bash helpers/check_core_dependencies.sh

# Check all components (enhanced)
bash helpers/check_core_dependencies_enhanced.sh        # Standard
bash helpers/check_core_dependencies_enhanced.sh --ultra # Ultra-minimal

# Component status overview
bash component_manager.sh

# Demo all options
bash helpers/clean_demo.sh
```

---

## 📦 **Progressive Enhancement Examples**

### Scenario 1: Basic Website
```bash
sudo bash minimal_install.sh --ultra
# ✅ Ready for basic WordPress site
```

### Scenario 2: Performance-Critical Site
```bash
sudo bash minimal_install.sh
sudo bash helpers/install_redis.sh
# ✅ WordPress + Redis caching
```

### Scenario 3: Managed/Monitored Site
```bash
sudo bash minimal_install.sh
sudo bash helpers/install_redis.sh
sudo bash helpers/ai_server_agent.sh
# ✅ WordPress + Performance + AI Monitoring
```

### Scenario 4: Public Site with External Access
```bash
sudo bash minimal_install.sh
sudo bash helpers/install_redis.sh
sudo bash helpers/install_cloudflare.sh
# ✅ WordPress + Performance + Secure Access
```

---

## 🧹 **Keep It Clean**

### Remove Unused Components
```bash
# Interactive cleanup
bash component_manager.sh
# Select option 9: Cleanup Unused

# Manual cleanup
sudo apt autoremove --purge
sudo apt autoclean
```

### Check System Bloat
```bash
# See what's taking space
du -sh /var/cache/apt/
dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -20
```

---

## � **Debugging & Troubleshooting**

### Debug Installation Issues
```bash
# Use debug mode for detailed logging
sudo bash minimal_install.sh --debug

# Use verbose mode for real-time output
sudo bash minimal_install.sh --verbose

# Check installation logs
tail -f /var/log/wordpress-installer/minimal_install.log
```

### Common Debug Commands
```bash
# Verify paths and structure
bash helpers/verify_paths.sh

# Test language system
bash helpers/test_language.sh

# Check for empty files
bash helpers/clean_empty_files.sh

# Clean up temporary files
bash quick_clean.sh
```

### Log Files Locations
```bash
# Installation logs
/var/log/wordpress-installer/minimal_install.log
/var/log/wordpress-installer/auto_install.log

# Service logs  
sudo journalctl -u lshttpd -f    # OpenLiteSpeed
sudo journalctl -u nginx -f     # Nginx
sudo journalctl -u mariadb -f   # MariaDB
```

### Verbose Mode Output Example
```bash
📝 [VERBOSE] Se actualizează lista de pachete...
🔍 [DEBUG] DEBIAN_FRONTEND setat la noninteractive  
📝 [EXEC] Actualizare pachete sistem
📝   Command: apt update
📝   Output: Hit:1 http://archive.ubuntu.com/ubuntu jammy InRelease
📝   ✅ Success
```

---

## �📖 **Documentation**

- 📘 **[Clean Approach Guide](documents/README_CLEAN_APPROACH.md)** - Detailed clean installation philosophy
- 🔧 **[Component Management](component_manager.sh)** - Interactive component installation
- 📊 **[Project Structure](documents/PROJECT_STRUCTURE_AFTER_REORGANIZATION.md)** - File organization
- ⚙️ **[Advanced Configuration](documents/)** - AI, Cloudflare, Security guides

---

## 🆘 **Quick Troubleshooting**

### "Installation fails or stops"
```bash
# Use debug mode to see exactly what happens
sudo bash minimal_install.sh --debug

# For auto install with full automation
sudo bash auto_install.sh --tunnel-id YOUR_ID --auto

# Check specific logs
tail -f /var/log/wordpress-installer/minimal_install.log
```

### "System too slow/heavy"
```bash
# Check what's running
systemctl list-units --state=running
# Remove unnecessary services  
sudo bash component_manager.sh  # Option 9: Cleanup
# Or start ultra-minimal next time
sudo bash minimal_install.sh --ultra
```

### "Need feature X"
```bash
# Add components progressively
sudo bash component_manager.sh
# Select component to install
```

### "Want to start over"
```bash
# Clean slate
sudo bash cleanup.sh  # Remove everything
sudo bash minimal_install.sh --ultra  # Start minimal
```

### "Auto install not working"
```bash
# Check parameters
sudo bash auto_install.sh --help

# Use with full automation
sudo bash auto_install.sh --tunnel-id abc123 --domain site.com --email admin@site.com --auto

# Debug auto install issues
sudo bash auto_install.sh --tunnel-id test --auto 2>&1 | tee auto_debug.log
```

---

**🎯 Remember: Start minimal, add only what you need, keep it clean!**
